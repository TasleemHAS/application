<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tic Tac Toe</title>
  <style>
    /* Add CSS styles for the game board, squares, etc. */
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f0f0f0;
    }

    .game-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 2px;
      border: 2px solid black;
      width: 306px;
      background-color: #fff;
      padding: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    .square {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 36px;
      border: 1px solid black;
      cursor: pointer;
      color: #444;
      transition: background-color 0.3s ease;
    }

    .square:hover {
      background-color: #ddd;
    }

    .x-color {
      color: #2196f3; /* Blue for X */
    }

    .o-color {
      color: #f44336; /* Red for O */
    }

    .celebration {
      font-size: 24px;
      font-weight: bold;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h1>Tic Tac Toe</h1>
    <div class="board" id="board">
      <!-- Squares will be dynamically added here -->
    </div>
    <div class="celebration" id="celebration"></div>
  </div>
import React, { useState } from 'react';

const TicTacToe = () => {
  const [currentPlayer, setCurrentPlayer] = useState('X');
  const [squares, setSquares] = useState(Array(9).fill(null));
  const [celebration, setCelebration] = useState('');
<script>
    // JavaScript for Tic Tac Toe game logic
    const board = document.getElementById('board');
    const celebration = document.getElementById('celebration');
    let currentPlayer = 'X';
    const squares = Array.from({ length: 9 });

    function createBoard() {
      squares.forEach((_, index) => {
        const square = document.createElement('div');
        square.classList.add('square');
        square.setAttribute('data-index', index);
        square.addEventListener('click', handleClick);
        board.appendChild(square);
      });
    }

    function handleClick(event) {
      const { index } = event.target.dataset;
      if (!squares[index]) {
        squares[index] = currentPlayer;
        event.target.textContent = currentPlayer;
        event.target.classList.add(currentPlayer === 'X' ? 'x-color' : 'o-color');
        if (checkWinner()) {
          celebration.textContent = `Player ${currentPlayer} wins! ðŸŽ‰`;
          setTimeout(resetBoard, 1500);
        } else if (!squares.includes(undefined)) {
          celebration.textContent = "It's a draw!";
          setTimeout(resetBoard, 1500);
        } else {
          currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        }
      }
    }

    function checkWinner() {
      const winningCombos = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6],
      ];

      return winningCombos.some(([a, b, c]) => {
        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
          return true;
        }
        return false;
      });
    }

    function resetBoard() {
      squares.fill(undefined);
      board.innerHTML = '';
      celebration.textContent = '';
      createBoard();
    }

    createBoard();
  </script>
</body>
</html>